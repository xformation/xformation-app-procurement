{
    "openapi": "3.0.0",
    "info": {
        "version": "3.0.1",
        "title": "procurement api",
        "license": {
            "name": "Apache-2.0",
            "url": ""
        },
        "contact": {}
    },
    "servers": [
        {
            "url": "http://localhost:7050/api",
            "variables": {
                "successCode": {
                    "enum": [
                        "200"
                    ],
                    "default": "200"
                }
            }
        }
    ],
    "paths": {
        "/requisitions": {
            "get": {
                "summary": "List of requisitions",
                "operationId": "",
                "tags": [
                    "requisition"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of requisitions",
                        "headers": {
                            "x-next": {
                                "description": "Requisiton List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/requisition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new requisition",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new requisition",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/requisitionData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new requisition created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Requisition",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/requisition"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "requisitionFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": true
                    },
                    {
                        "name": "requisitionLineItemFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": false
                    }
                ]
            },
            "put": {
                "summary": "Update existing requisition",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a requisition",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/requisitionData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new requisition updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Requisition",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/requisition"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "requisitionFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": false
                    },
                    {
                        "name": "requisitionLineItemFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": false
                    }
                ]
            }
        },
        "/requisitions/{id}": {
            "get": {
                "summary": "Find requisition by ID",
                "operationId": "{id}",
                "tags": [
                    "requisitions"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/requisition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "requisition api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of requisition to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete requisition by ID",
                "operationId": "{id}",
                "tags": [
                    "requisitions"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "requisition api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of requisition to fetch"
                    }
                ]
            }
        },
        "/requisitions/approve": {
            "post": {
                "summary": "Approve a requisition",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to approve a requisition",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/requisitionData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "requisition approved successfully",
                        "headers": {
                            "x-next": {
                                "description": "Requisition",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {}
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/requisitions/sendToVendor": {
            "post": {
                "summary": "Assign requisitions to vendors",
                "operationId": "",
                "requestBody": {
                    "description": "Assign requisitions to vendors",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "x-count": 2,
                                "items": {
                                    "$ref": "#/components/schemas/requisitionData"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "list of requisition and vendor mappings",
                        "headers": {
                            "x-next": {
                                "description": "list of requisition and vendor mappings",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 4,
                                            "items": {
                                                "$ref": "#/components/schemas/vendorRequisitionBucket"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/invoice": {
            "get": {
                "summary": "List of invoice",
                "operationId": "",
                "tags": [
                    "invoice"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of invoice",
                        "headers": {
                            "x-next": {
                                "description": "invoice List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/invoice"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new invoice",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new invoice",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/invoiceData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new invoice created successfully",
                        "headers": {
                            "x-next": {
                                "description": "invoice",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/invoice"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing invoice",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a invoice",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/invoiceData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new invoice updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "invoice",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/invoice"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/invoice/{id}": {
            "get": {
                "summary": "Find invoice by ID",
                "operationId": "{id}",
                "tags": [
                    "invoice"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "invoice api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of invoice to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete invoice by ID",
                "operationId": "{id}",
                "tags": [
                    "invoice"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "invoice api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of invoice to fetch"
                    }
                ]
            }
        },
        "/committee": {
            "get": {
                "summary": "List of committee",
                "operationId": "",
                "tags": [
                    "committee"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of committee",
                        "headers": {
                            "x-next": {
                                "description": "Committee List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/committee"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new committee",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new committee",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/committeeData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new committee created successfully",
                        "headers": {
                            "x-next": {
                                "description": "committee",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/committee"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing committee",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a committee",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/committeeData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new committee updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "committee",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/committee"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/committee/{id}": {
            "get": {
                "summary": "Find committee by ID",
                "operationId": "{id}",
                "tags": [
                    "committee"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/committee"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committee api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committee to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete committee by ID",
                "operationId": "{id}",
                "tags": [
                    "committee"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committee api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committee to fetch"
                    }
                ]
            }
        },
        "/committeeMembers": {
            "get": {
                "summary": "List of committeeMembers",
                "operationId": "",
                "tags": [
                    "committeeMembers"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of committeeMembers",
                        "headers": {
                            "x-next": {
                                "description": "CommitteeMembers List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/committeeMembers"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new committeeMembers",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new committeeMembers",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/committeeMembersData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new committeeMembers created successfully",
                        "headers": {
                            "x-next": {
                                "description": "committeeMembers",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/committeeMembers"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing committeeMembers",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a committeeMembers",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/committeeMembersData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new committeeMembers updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "committeeMembers",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/committeeMembers"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/committeeMembers/{id}": {
            "get": {
                "summary": "Find committeeMembers by ID",
                "operationId": "{id}",
                "tags": [
                    "committeeMembers"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/committeeMembers"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committeeMembers api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committeeMembers to fetch"
                    }
                ]
            }
        },
        "/contact": {
            "get": {
                "summary": "List of contact",
                "operationId": "",
                "tags": [
                    "contact"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of contact",
                        "headers": {
                            "x-next": {
                                "description": "contact List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/contact"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new contact",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new contact",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new contact created successfully",
                        "headers": {
                            "x-next": {
                                "description": "contact",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/contact"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing contact",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a contact",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new contact updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "contact",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/contact"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/contact/{id}": {
            "get": {
                "summary": "Find contact by ID",
                "operationId": "{id}",
                "tags": [
                    "contact"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/contact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "contact api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of contact to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete committee by ID",
                "operationId": "{id}",
                "tags": [
                    "committee"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committee api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committee to fetch"
                    }
                ]
            }
        },
        "/purchaseOrder": {
            "get": {
                "summary": "List of purchaseOrder",
                "operationId": "",
                "tags": [
                    "purchaseOrder"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of purchaseOrder",
                        "headers": {
                            "x-next": {
                                "description": "purchaseOrder List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/purchaseOrder"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new purchaseOrder",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new purchaseOrder",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/purchaseOrderData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new purchaseOrder created successfully",
                        "headers": {
                            "x-next": {
                                "description": "purchaseOrder",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/purchaseOrder"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing purchaseOrder",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a purchaseOrder",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/purchaseOrderData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new purchaseOrder updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "purchaseOrder",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/purchaseOrder"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/purchaseOrder/{id}": {
            "get": {
                "summary": "Find purchaseOrder by ID",
                "operationId": "{id}",
                "tags": [
                    "purchaseOrder"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/purchaseOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "purchaseOrder api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of purchaseOrder to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete committee by ID",
                "operationId": "{id}",
                "tags": [
                    "committee"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committee api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committee to fetch"
                    }
                ]
            }
        },
        "/purchaseOrder/approve": {
            "post": {
                "summary": "Approve a purchaseOrder",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to approve a purchaseOrder",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/purchaseOrderData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "purchaseOrder approved successfully",
                        "headers": {
                            "x-next": {
                                "description": "purchaseOrder",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {}
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/quotation": {
            "get": {
                "summary": "List of quotation",
                "operationId": "",
                "tags": [
                    "quotation"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of quotation",
                        "headers": {
                            "x-next": {
                                "description": "quotation List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/quotation"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new quotation",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new quotation",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/quotationData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new quotation created successfully",
                        "headers": {
                            "x-next": {
                                "description": "quotation",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/quotation"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing quotation",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a quotation",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/quotationData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new quotation updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "quotation",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/quotation"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/quotation/{id}": {
            "get": {
                "summary": "Find quotation by ID",
                "operationId": "{id}",
                "tags": [
                    "quotation"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/quotation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "quotation api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of quotation to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete committee by ID",
                "operationId": "{id}",
                "tags": [
                    "committee"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "committee api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of committee to fetch"
                    }
                ]
            }
        },
        "/buyer": {
            "get": {
                "summary": "List of buyer",
                "operationId": "",
                "tags": [
                    "buyer"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of buyer",
                        "headers": {
                            "x-next": {
                                "description": "Buyer List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/buyer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new buyer",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new buyer",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/buyerData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new buyer created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Buyer",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/buyer"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing buyer",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a buyer",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/buyerData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new buyer updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Buyer",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/buyer"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/buyer/{id}": {
            "get": {
                "summary": "Find buyer by ID",
                "operationId": "{id}",
                "tags": [
                    "buyer"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/buyer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "buyer api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of buyer to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete buyer by ID",
                "operationId": "{id}",
                "tags": [
                    "buyer"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "buyer api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of buyer to fetch"
                    }
                ]
            }
        },
        "/currency": {
            "get": {
                "summary": "List of currency",
                "operationId": "",
                "tags": [
                    "currency"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of currency",
                        "headers": {
                            "x-next": {
                                "description": "Currency List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/currency"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new currency",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new currency",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/currencyData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new currency created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Currency",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/currency"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing currency",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a currency",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/currencyData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new currency updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Currency",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/currency"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/currency/{id}": {
            "get": {
                "summary": "Find currency by ID",
                "operationId": "{id}",
                "tags": [
                    "currency"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/currency"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "currency api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of currency to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete currency by ID",
                "operationId": "{id}",
                "tags": [
                    "currency"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "currency api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of currency to fetch"
                    }
                ]
            }
        },
        "/department": {
            "get": {
                "summary": "List of department",
                "operationId": "",
                "tags": [
                    "department"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of department",
                        "headers": {
                            "x-next": {
                                "description": "Department List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/department"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new department",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new department",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/departmentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new department created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Department",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/department"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing department",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a department",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/departmentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new department updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Department",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/department"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/department/{id}": {
            "get": {
                "summary": "Find department by ID",
                "operationId": "{id}",
                "tags": [
                    "department"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/department"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "department api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of department to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete department by ID",
                "operationId": "{id}",
                "tags": [
                    "department"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "department api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of department to fetch"
                    }
                ]
            }
        },
        "/document": {
            "get": {
                "summary": "List of document",
                "operationId": "",
                "tags": [
                    "document"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of document",
                        "headers": {
                            "x-next": {
                                "description": "Document List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/document"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new document",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new document",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/documentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new document created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Document",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/document"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing document",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a document",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/documentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new document updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Document",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/document"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/document/{id}": {
            "get": {
                "summary": "Find document by ID",
                "operationId": "{id}",
                "tags": [
                    "document"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/document"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "document api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of document to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete document by ID",
                "operationId": "{id}",
                "tags": [
                    "document"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "document api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of document to fetch"
                    }
                ]
            }
        },
        "/rules": {
            "get": {
                "summary": "List of rules",
                "operationId": "",
                "tags": [
                    "rules"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of rules",
                        "headers": {
                            "x-next": {
                                "description": "Rules List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/rules"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new rules",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new rules",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/rulesData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new rules created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Rules",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/rules"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing rules",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a rules",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/rulesData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new rules updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Rules",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/rules"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/rules/{id}": {
            "get": {
                "summary": "Find rules by ID",
                "operationId": "{id}",
                "tags": [
                    "rules"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rules"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "rules api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of rules to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete rules by ID",
                "operationId": "{id}",
                "tags": [
                    "rules"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "rules api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of rules to fetch"
                    }
                ]
            }
        },
        "/rules/name/{name}": {
            "get": {
                "summary": "Find rules by Name",
                "operationId": "{name}",
                "tags": [
                    "rules"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rules"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Name supplied"
                    },
                    "404": {
                        "description": "rules api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Name of rules to fetch"
                    }
                ]
            }
        },
        "/vendor": {
            "get": {
                "summary": "List of vendor",
                "operationId": "",
                "tags": [
                    "vendor"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of vendor",
                        "headers": {
                            "x-next": {
                                "description": "Vendor List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/vendor"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new vendor",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new vendor",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vendorData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new vendor created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Vendor",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/vendor"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing vendor",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a vendor",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vendorData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new vendor updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Vendor",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/vendor"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/vendor/{id}": {
            "get": {
                "summary": "Find vendor by ID",
                "operationId": "{id}",
                "tags": [
                    "vendor"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vendor"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "vendor api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of vendor to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete vendor by ID",
                "operationId": "{id}",
                "tags": [
                    "vendor"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "vendor api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of vendor to fetch"
                    }
                ]
            }
        },
        "/roles": {
            "get": {
                "summary": "List of roles",
                "operationId": "",
                "tags": [
                    "roles"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of roles",
                        "headers": {
                            "x-next": {
                                "description": "Roles List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 1,
                                            "items": {
                                                "$ref": "#/components/schemas/roles"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new roles",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new roles",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/rolesData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new roles created successfully",
                        "headers": {
                            "x-next": {
                                "description": "Roles",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/roles"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            },
            "put": {
                "summary": "Update existing roles",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a roles",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/rolesData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new roles updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "Roles",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/roles"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    }
                ]
            }
        },
        "/roles/{id}": {
            "get": {
                "summary": "Find roles by ID",
                "operationId": "{id}",
                "tags": [
                    "roles"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/roles"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "roles api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of roles to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete roles by ID",
                "operationId": "{id}",
                "tags": [
                    "roles"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "roles api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of roles to fetch"
                    }
                ]
            }
        },
        "/requisitionLineItem": {
            "get": {
                "summary": "List of requisitionLineItem",
                "operationId": "",
                "tags": [
                    "requisitionLineItem"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of requisitionLineItem",
                        "headers": {
                            "x-next": {
                                "description": "requisitionLineItem List",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "array",
                                            "x-count": 26,
                                            "items": {
                                                "$ref": "#/components/schemas/requisitionLineItemLists"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new requisitionLineItem",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to create new requisitionLineItem",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/requisitionLineItemData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new requisitionLineItem created successfully",
                        "headers": {
                            "x-next": {
                                "description": "requisitionLineItem",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/requisitionLineItemLists"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "requisitionLineItemFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": false
                    }
                ]
            },
            "put": {
                "summary": "Update existing requisitionLineItem",
                "operationId": "",
                "requestBody": {
                    "description": "Request body to update a requisitionLineItem",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/requisitionLineItemData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "new requisitionLineItem updated successfully",
                        "headers": {
                            "x-next": {
                                "description": "requisitionLineItem",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/requisitionLineItemLists"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "requisitionLineItemFile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "object"
                        },
                        "allowEmptyValue": false
                    }
                ]
            }
        },
        "/requisitionLineItem/{id}": {
            "get": {
                "summary": "Find requisitionLineItem by ID",
                "operationId": "{id}",
                "tags": [
                    "requisitionLineItem"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/requisitionLineItemLists"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "requisitionLineItem api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of requisitionLineItem to fetch"
                    }
                ]
            },
            "delete": {
                "summary": "Delete requisitionLineItem by ID",
                "operationId": "{id}",
                "tags": [
                    "requisitionLineItem"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "requisitionLineItem api not found"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "ID of requisitionLineItem to fetch"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "contact": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the contact"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "firstName"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "middleName"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "lastName"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phoneNumber"
                    },
                    "email": {
                        "type": "string",
                        "description": "email"
                    },
                    "isActive": {
                        "type": "string",
                        "description": "isActive"
                    },
                    "inviteStatus": {
                        "type": "string",
                        "description": "inviteStatus"
                    },
                    "invitationLink": {
                        "type": "string",
                        "description": "invitationLink"
                    },
                    "inviteSentOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "sent date of the invitation"
                    },
                    "designation": {
                        "type": "string",
                        "description": "designation"
                    },
                    "jobType": {
                        "type": "string",
                        "description": "jobType"
                    },
                    "notes": {
                        "type": "string",
                        "description": "notes"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the contact"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of  contact"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the contact"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  contact"
                    },
                    "documentLists": {
                        "$ref": "#/components/schemas/document"
                    }
                }
            },
            "roles": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Roles"
                    },
                    "name": {
                        "type": "string",
                        "description": " name of the Roles"
                    },
                    "description": {
                        "type": "string",
                        "description": "description  of the Roles"
                    },
                    "securityserviceId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "security service id of the Roles"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the Roles"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy use for requester of  Roles"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the Roles"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy use for requester of  Roles"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Roles"
                    }
                }
            },
            "committee": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the committee"
                    },
                    "name": {
                        "type": "string",
                        "description": "name"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the committee"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the committee"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the committee"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of  committee"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the committee"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  committee"
                    },
                    "notes": {
                        "type": "string",
                        "x-faker": "{{lorem.sentence}}",
                        "description": "note for the committee"
                    }
                }
            },
            "committeeMembers": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the committeeMembers"
                    },
                    "name": {
                        "type": "string",
                        "description": "name"
                    },
                    "company": {
                        "type": "string",
                        "description": "company"
                    },
                    "department": {
                        "type": "string",
                        "description": "department"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phoneNumber"
                    },
                    "email": {
                        "type": "string",
                        "description": "email"
                    },
                    "designation": {
                        "type": "string",
                        "description": "designation"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the committeeMembers"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of  committeeMembers"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the committeeMembers"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  committeeMembers"
                    },
                    "document": {
                        "$ref": "#/components/schemas/document"
                    }
                }
            },
            "invoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the invoice"
                    },
                    "invoiceNo": {
                        "type": "string",
                        "description": "invoiceNo"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "amount"
                    },
                    "modeOfPayment": {
                        "type": "string",
                        "description": "modeOfPayment"
                    },
                    "txnRefNo": {
                        "type": "string",
                        "description": "txnRefNo"
                    },
                    "chequeOrDdNo": {
                        "type": "string",
                        "description": "chequeOrDdNo"
                    },
                    "issuerBank": {
                        "type": "string",
                        "description": "issuerBank"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the invoice"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the invoice"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of  invoice"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the invoice"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  invoice"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.date}}",
                        "description": "Due date use of a invoice"
                    },
                    "notes": {
                        "type": "string",
                        "x-faker": "{{lorem.sentence}}",
                        "description": "note for the invoice"
                    },
                    "quotation": {
                        "$ref": "#/components/schemas/quotation"
                    },
                    "document": {
                        "$ref": "#/components/schemas/document"
                    }
                }
            },
            "rules": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Rules"
                    },
                    "name": {
                        "type": "string",
                        "description": " name of the Rules"
                    },
                    "description": {
                        "type": "string",
                        "description": "description  of the Rules"
                    },
                    "rule": {
                        "type": "string",
                        "description": "rule  of the Rules"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the Rules"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy use for requester of  Rules"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the Rules"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy use for requester of  Rules"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Rules"
                    },
                    "roles": {
                        "$ref": "#/components/schemas/roles"
                    }
                }
            },
            "document": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the document"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "fileName of document"
                    },
                    "fileType": {
                        "type": "string",
                        "description": "fileType"
                    },
                    "fileExt": {
                        "type": "string",
                        "description": "fileExt"
                    },
                    "fileSize": {
                        "type": "integer",
                        "description": "fileSize"
                    },
                    "storageLocation": {
                        "type": "string",
                        "description": "storageLocation"
                    },
                    "localFilePath": {
                        "type": "string",
                        "description": "localFilePath"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "s3Bucket"
                    },
                    "s3Url": {
                        "type": "string",
                        "description": "s3Url"
                    },
                    "azureUrl": {
                        "type": "string",
                        "description": "azureUrl"
                    },
                    "sourceOfOrigin": {
                        "type": "string",
                        "description": "sourceOfOrigin"
                    },
                    "sourceId": {
                        "type": "integer",
                        "description": "sourceId"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the document"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of document"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the document"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  document"
                    }
                }
            },
            "quotation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the quotation"
                    },
                    "quotationNo": {
                        "type": "string",
                        "description": "quotationNo"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of quotation"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the quotation"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "createdBy use for requester of  quotation"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the quotation"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name}}",
                        "description": "updatedBy use for requester of  quotation"
                    },
                    "vendor": {
                        "$ref": "#/components/schemas/vendor"
                    },
                    "document": {
                        "$ref": "#/components/schemas/document"
                    },
                    "purchaseOrder": {
                        "$ref": "#/components/schemas/purchaseOrder"
                    }
                }
            },
            "purchaseOrder": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the purchaseOrder"
                    },
                    "poNo": {
                        "type": "string",
                        "description": "poNo of the purchaseOrder"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the purchaseOrder"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the purchaseOrder"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy use for requester of  purchaseOrder"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the purchaseOrder"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy use for requester of  purchaseOrder"
                    },
                    "dueDate": {
                        "type": "string",
                        "x-faker": "{{datatype.future}}",
                        "description": "Due date use of a purchaseOrder"
                    },
                    "termsAndConditions": {
                        "type": "string",
                        "description": "termsAndConditions of the purchaseOrder"
                    },
                    "notes": {
                        "type": "string",
                        "description": "notes of the purchaseOrder"
                    },
                    "document": {
                        "$ref": "#/components/schemas/requisition"
                    }
                }
            },
            "department": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "name": {
                        "type": "string",
                        "x-faker": "{{commerce.department}}"
                    }
                }
            },
            "currency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "countryName": {
                        "type": "string",
                        "default": "Reactive secured line",
                        "x-faker": "{{address.country}}"
                    },
                    "countryCode": {
                        "type": "string",
                        "x-faker": "{{address.countryCode}}"
                    },
                    "code": {
                        "type": "string",
                        "x-faker": "{{finance.currencyCode}}"
                    }
                }
            },
            "buyer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Buyer"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "first name of the Buyer"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "middle name of the Buyer"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "last name of the Buyer"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phone number of the Buyer"
                    },
                    "email": {
                        "type": "string",
                        "description": "email of the Buyer"
                    },
                    "address": {
                        "type": "string",
                        "description": "address of the Buyer"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "zip code of the Buyer"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the Buyer"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy use for requester of  Buyer"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the Buyer"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy use for requester of  Buyer"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Buyer"
                    }
                }
            },
            "vendor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "firstName": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} ",
                        "description": "firstName"
                    },
                    "middleName": {
                        "type": "string",
                        "x-faker": "{{name.middleName}} ",
                        "description": "middleName"
                    },
                    "lastName": {
                        "type": "string",
                        "x-faker": "{{name.lastName}} ",
                        "description": "lastName"
                    },
                    "phoneNumber": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "phone.phoneNumber",
                        "description": "phoneNumber"
                    },
                    "email": {
                        "type": "string",
                        "x-faker": "{{internet.email}}",
                        "description": "email"
                    },
                    "address": {
                        "type": "string",
                        "x-faker": "{{address.streetName}} {{address.state}},{{address.zipCodeByState}} {{address.country}}",
                        "description": "vendor address"
                    },
                    "zipCode": {
                        "type": "string",
                        "x-faker": "{{address.zipCodeByState}}",
                        "description": "zipCode"
                    },
                    "status": {
                        "type": "string",
                        "default": "ACTIVE",
                        "description": "status"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "createdOn"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updatedOn"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy"
                    }
                }
            },
            "vendorRequisitionBucket": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "status": {
                        "type": "string",
                        "default": "ASSIGNED_TO_VENDOR",
                        "description": "status"
                    },
                    "stages": {
                        "type": "string",
                        "default": "ASSIGNED_TO_VENDOR",
                        "description": "stages"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "createdOn"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updatedOn"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy"
                    },
                    "requisition": {
                        "$ref": "#/components/schemas/requisition"
                    },
                    "vendor": {
                        "$ref": "#/components/schemas/vendor"
                    }
                }
            },
            "requisition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Requisition"
                    },
                    "requisitionNo": {
                        "type": "string",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Requisition"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "created date of the Requisition"
                    },
                    "createdBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "createdBy use for requester of  Requisition"
                    },
                    "updatedOn": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "datatype.datetime",
                        "description": "updated date of the Requisition"
                    },
                    "updatedBy": {
                        "type": "string",
                        "x-faker": "{{name.firstName}} {{name.lastName}}",
                        "description": "updatedBy use for requester of  Requisition"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the requisition"
                    },
                    "progressStage": {
                        "type": "string",
                        "description": "current stage of the requisition"
                    },
                    "financialYear": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 2021, \"max\": 100000 })",
                        "description": "financial year of the Requisition"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the requisition"
                    },
                    "totalPrice": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "total amount of the Requisition"
                    },
                    "notes": {
                        "type": "string",
                        "x-faker": "{{lorem.sentence}}",
                        "description": "note for the Requisition"
                    },
                    "dueDate": {
                        "type": "string",
                        "x-faker": "{{datatype.future}}",
                        "description": "Due date use of a Requisition"
                    },
                    "department": {
                        "description": "department of approve purchase order list department ",
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64",
                                "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                            },
                            "name": {
                                "type": "string",
                                "x-faker": "{{commerce.department}}"
                            }
                        }
                    },
                    "currency": {
                        "description": "curreny of approve purchase order payment",
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64",
                                "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                            },
                            "countryName": {
                                "type": "string",
                                "default": "Reactive secured line",
                                "x-faker": "{{address.country}}"
                            },
                            "countryCode": {
                                "type": "string",
                                "x-faker": "{{address.countryCode}}"
                            },
                            "code": {
                                "type": "string",
                                "x-faker": "{{finance.currencyCode}}"
                            }
                        }
                    },
                    "requisitionLineItemLists": {
                        "type": "array",
                        "x-count": 7,
                        "items": {
                            "description": "requisitionLineItemLists of the requisition",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                                },
                                "price": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1000, \"max\": 10000 })"
                                },
                                "itemDescription": {
                                    "type": "string",
                                    "x-faker": "commerce.productName"
                                },
                                "orderQuantity": {
                                    "type": "integer",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10 })"
                                },
                                "ratePerItem": {
                                    "type": "integer",
                                    "x-faker": "datatype.number({ \"min\": 1000, \"max\": 100000 })"
                                }
                            }
                        }
                    }
                }
            },
            "requisitionLineItemLists": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "price": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1000, \"max\": 10000 })"
                    },
                    "itemDescription": {
                        "type": "string",
                        "x-faker": "commerce.productName"
                    },
                    "orderQuantity": {
                        "type": "integer",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10 })"
                    },
                    "ratePerItem": {
                        "type": "integer",
                        "x-faker": "datatype.number({ \"min\": 1000, \"max\": 100000 })"
                    }
                }
            },
            "requisitionData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "requisitionId": {
                        "description": "selected requisition id",
                        "type": "integer"
                    },
                    "departmentId": {
                        "description": "selected department id",
                        "type": "integer"
                    },
                    "currencyId": {
                        "description": "selected currency id",
                        "type": "integer"
                    },
                    "financialYear": {
                        "description": "Year of the requisition raised",
                        "type": "string"
                    },
                    "progressStage": {
                        "description": "NEW",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "notes": {
                        "description": "additional comments on the requisition",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the requisition",
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.date}}",
                        "description": "Due date use of a Requisition"
                    },
                    "user": {
                        "description": "requester",
                        "type": "string"
                    },
                    "requisitionFile": {
                        "description": "list of extra budgetory files",
                        "type": "array",
                        "x-count": 7,
                        "items": {
                            "description": "extra budgetory files list of the requisition",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                                }
                            }
                        }
                    },
                    "requisitionLineItemFile": {
                        "description": "list of excel file containing the data of requisition line items",
                        "type": "array",
                        "x-count": 7,
                        "items": {
                            "description": "list of the requisition line items",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                                },
                                "price": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1000, \"max\": 10000 })"
                                },
                                "itemDescription": {
                                    "type": "string",
                                    "x-faker": "commerce.productName"
                                },
                                "orderQuantity": {
                                    "type": "integer",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10 })"
                                },
                                "ratePerItem": {
                                    "type": "integer",
                                    "x-faker": "datatype.number({ \"min\": 1000, \"max\": 100000 })"
                                }
                            }
                        }
                    }
                }
            },
            "invoiceData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the invoice"
                    },
                    "documentId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "documentId for invoice"
                    },
                    "quotationId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "quotationId for invoice"
                    },
                    "invoiceNo": {
                        "type": "string",
                        "description": "invoiceNo"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "amount"
                    },
                    "modeOfPayment": {
                        "type": "string",
                        "description": "modeOfPayment"
                    },
                    "txnRefNo": {
                        "type": "string",
                        "description": "txnRefNo"
                    },
                    "chequeOrDdNo": {
                        "type": "string",
                        "description": "chequeOrDdNo"
                    },
                    "issuerBank": {
                        "type": "string",
                        "description": "issuerBank"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.date}}",
                        "description": "Due date use of a Requisition"
                    },
                    "notes": {
                        "type": "string",
                        "x-faker": "{{lorem.sentence}}",
                        "description": "note for the invoice"
                    }
                }
            },
            "committeeMembersData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the committeeMembers"
                    },
                    "name": {
                        "description": "additional comments on the committeeMembers",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the committeeMembers",
                        "type": "string"
                    },
                    "notes": {
                        "description": "additional comments on the committeeMembers",
                        "type": "string"
                    },
                    "file": {
                        "description": "list of extra budgetory files",
                        "type": "array",
                        "x-count": 7,
                        "items": {
                            "description": "extra budgetory files list of the requisition",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                                }
                            }
                        }
                    }
                }
            },
            "committeeData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the committee"
                    },
                    "name": {
                        "description": "additional comments on the committee",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the committee",
                        "type": "string"
                    },
                    "notes": {
                        "description": "additional comments on the committee",
                        "type": "string"
                    }
                }
            },
            "contactData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the contact"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "firstName"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "middleName"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "lastName"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phoneNumber"
                    },
                    "email": {
                        "type": "string",
                        "description": "email"
                    },
                    "notes": {
                        "description": "additional comments on the contact",
                        "type": "string"
                    }
                }
            },
            "purchaseOrderData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the purchaseOrder"
                    },
                    "requisitionId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "requisitionId for purchaseOrder"
                    },
                    "purchaseOrderId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "purchaseOrderId for purchaseOrder"
                    },
                    "poNo": {
                        "type": "string",
                        "description": "poNo of the purchaseOrder"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "roleName for purchaseOrder"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the purchaseOrder"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.date}}",
                        "description": "Due date use of a Requisition"
                    },
                    "notes": {
                        "description": "additional comments on the purchaseOrder",
                        "type": "string"
                    }
                }
            },
            "quotationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the quotation"
                    },
                    "documentId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "documentId for the quotation"
                    },
                    "vendorId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "vendorId for the quotation"
                    },
                    "purchaseOrderId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "purchaseOrderId for the quotation"
                    },
                    "quotationNo": {
                        "type": "string",
                        "description": "quotationNo"
                    },
                    "status": {
                        "type": "string",
                        "description": "status"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.future}}",
                        "description": "Due date use of a Requisition"
                    }
                }
            },
            "buyerData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Buyer"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "first name of the Buyer"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "middle name of the Buyer"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "last name of the Buyer"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phone number of the Buyer"
                    },
                    "email": {
                        "type": "string",
                        "description": "email of the Buyer"
                    },
                    "address": {
                        "type": "string",
                        "description": "address of the Buyer"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "zip code of the Buyer"
                    },
                    "user": {
                        "type": "string",
                        "description": "user of the Buyer"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Buyer"
                    }
                }
            },
            "currencyData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "countryName": {
                        "type": "string",
                        "default": "Reactive secured line",
                        "x-faker": "{{address.country}}"
                    },
                    "countryCode": {
                        "type": "string",
                        "x-faker": "{{address.countryCode}}"
                    },
                    "code": {
                        "type": "string",
                        "x-faker": "{{finance.currencyCode}}"
                    }
                }
            },
            "departmentData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                    },
                    "name": {
                        "type": "string",
                        "x-faker": "{{address.name}}"
                    }
                }
            },
            "documentData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the document"
                    },
                    "contactId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "contact id for document"
                    },
                    "requisitionLineItemId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "requisition line item id for document"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "fileName"
                    },
                    "fileType": {
                        "type": "string",
                        "description": "fileType"
                    },
                    "fileExt": {
                        "type": "string",
                        "description": "fileExt"
                    },
                    "fileSize": {
                        "type": "integer",
                        "description": "fileSize"
                    },
                    "storageLocation": {
                        "type": "string",
                        "description": "storageLocation"
                    },
                    "localFilePath": {
                        "type": "string",
                        "description": "localFilePath"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "s3Bucket"
                    },
                    "s3Url": {
                        "type": "string",
                        "description": "s3Url"
                    },
                    "azureUrl": {
                        "type": "string",
                        "description": "azureUrl"
                    },
                    "sourceOfOrigin": {
                        "type": "string",
                        "description": "sourceOfOrigin"
                    },
                    "sourceId": {
                        "type": "integer",
                        "description": "sourceId"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier"
                    }
                }
            },
            "rolesData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Roles"
                    },
                    "name": {
                        "type": "string",
                        "description": " name of the Roles"
                    },
                    "description": {
                        "type": "string",
                        "description": "description  of the Roles"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Roles"
                    },
                    "user": {
                        "type": "string",
                        "description": "user of the Roles"
                    }
                }
            },
            "rulesData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Rules"
                    },
                    "ruleId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "rule id of the Rules"
                    },
                    "name": {
                        "type": "string",
                        "description": " name of the Rules"
                    },
                    "roleName": {
                        "type": "string",
                        "description": " role name of the Rules"
                    },
                    "description": {
                        "type": "string",
                        "description": "description  of the Rules"
                    },
                    "rule": {
                        "type": "string",
                        "description": "rule  of the Rules"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Rules"
                    },
                    "user": {
                        "type": "string",
                        "description": "user of the Rules"
                    }
                }
            },
            "vendorData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the Vendor"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "first name of the Vendor"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "middle name of the Vendor"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "last name of the Vendor"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "phone number of the Vendor"
                    },
                    "email": {
                        "type": "string",
                        "description": "email of the Vendor"
                    },
                    "address": {
                        "type": "string",
                        "description": "address of the Vendor"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "zip code of the Vendor"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of the Vendor"
                    }
                }
            },
            "requisitionLineItemData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "id of the requisitionLineItem"
                    },
                    "requisitionId": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "requisition id of the requisitionLineItem"
                    },
                    "status": {
                        "description": "Status of the requisitionLineItem",
                        "type": "string"
                    },
                    "progressStage": {
                        "description": "progress stage on the requisitionLineItem",
                        "type": "string"
                    },
                    "itemDescription": {
                        "description": "item description on the requisitionLineItem",
                        "type": "string"
                    },
                    "orderQuantity": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "orderQuantity of the requisitionLineItem"
                    },
                    "price": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "price of the requisitionLineItem"
                    },
                    "priority": {
                        "description": "priority of requisitionLineItem",
                        "type": "string"
                    },
                    "notes": {
                        "description": "additional comments on the requisitionLineItem",
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date",
                        "x-faker": "{{datatype.future}}",
                        "description": "Due date use of a Requisition"
                    },
                    "ratePerItem": {
                        "type": "integer",
                        "format": "int64",
                        "x-faker": "datatype.number({ \"min\": 1, \"max\": 100000 })",
                        "description": "ratePerItem of the requisitionLineItem"
                    },
                    "type": {
                        "type": "string"
                    },
                    "requisitionLineItemFile": {
                        "description": "list of extra budgetory files",
                        "type": "array",
                        "x-count": 7,
                        "items": {
                            "description": "extra budgetory files list of the requisition",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-faker": "datatype.number({ \"min\": 1, \"max\": 10000 })"
                                }
                            }
                        }
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "BasicAuth": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "links": {},
        "callbacks": {}
    },
    "security": [
        {
            "BasicAuth": []
        }
    ]
}